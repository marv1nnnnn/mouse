---
description: 
globs: 
alwaysApply: true
---
---
description: "The canonical MDC structure for a Glyph Protocol PlanFile. The Agent MUST generate and maintain PlanFiles for complex tasks (M, L, X) according to this exact structure. This file is CRITICAL, serving as both the detailed, multi-level plan and the granular, real-time sub-task execution log."
ruleType: Always
---

# Glyph Protocol: Execution Plan & Granular Log
## Parent Task ID: `<TaskID>` (e.g., GLYPH#TASK_20231115103000_A4B1C2)
## Parent Task Title: `<Task Title from Parent Task>`

**Parent Task File Link:** `../../tasks/<TaskID>.md` (Assuming PlanFile is in `.glyph/plans/`)
**Plan Generation Date:** `YYYY-MM-DDTHH:MM:SSZ` (Set by Agent)
**Plan Version:** `1.0` (Incremented by Agent if plan is revised after User feedback, e.g., 1.1, 2.0)
**Last Updated By:** `Agent` | `User` (If User directly edits, though Agent should manage it)
**Last Updated At:** `YYYY-MM-DDTHH:MM:SSZ` (Updated by Agent on each modification)

**Overall Task Objective (Summarized from parent task `Description` and `Deliverables`):**
> (Agent writes a 1-2 sentence concise summary of the overarching goal here.)

**Key Assumptions for this Plan:**
> (Agent lists any critical assumptions made during the planning phase that underpin this plan's validity. E.g., "Assuming API endpoint X is stable and returns data in schema Y." "Assuming availability of Z GB free disk space.")

---
## Sub-Task Execution Sequence & Logs:

---
**SubTaskID:** `<TaskID>/Sub-1` (e.g., GLYPH#TASK_20231115103000_A4B1C2/Sub-1)
**Objective:** (Clear, specific, actionable, and verifiable goal for *this* sub-task. Must directly contribute to parent task's deliverables.)
**Estimated Sub-Task Effort:** `XS` (Very Small, <30min) | `S` (Small, <2hrs) | `M` (Medium, 2-4hrs) (Agent's estimate for this sub-unit)
**InitialKeySteps (Agent's Envisioned Actions):** (Bulleted list of high-level actions Agent initially plans to achieve the sub-task objective. These may evolve during execution, with deviations logged.)
  - Step 1: Analyze input data schema from `path/to/input_spec.json`.
  - Step 2: Implement data transformation logic function `transform_data()`.
  - Step 3: Write unit tests for `transform_data()`.
  - Step 4: Generate output file `output/transformed_data.csv`.
**Status:** `Pending` | `InProgress` | `Done` | `Failed` | `Blocked` (Managed by Agent based on execution)
**Deliverables (Sub-Task Specific):** (Optional: Specific, verifiable outputs for *this* sub-task. Must align with its Objective.)
  - "`output/transformed_data.csv` created and validated against schema."
  - "Unit tests for `transform_data()` passing."
**ContextualInputs (CRITICAL - Populated by Agent *at start of sub-task execution*):**
  > **Primary Rule: LINK, DON'T EMBED large data/code. Reference `FinalOutputSummary` of prior sub-tasks for values/paths.**
  - `InputSource_TaskID/SubTaskID: <TaskID>/Sub-X`
    - `Artifact_Type: FinalOutputSummary.key_outputs_or_values.api_session_token_ref`
    - `Description: Using API session token reference obtained in Sub-X for authenticated calls.`
    - `Local_Variable_Name (Conceptual): agent_internal_api_token_ref`
  - `InputSource_TaskID/SubTaskID: <TaskID>/Sub-Y`
    - `Artifact_Type: FinalOutputSummary.output_artifact_paths[0]` (e.g., `path/to/intermediate_file.json`)
    - `Description: Processing intermediate data file generated by Sub-Y.`
    - `Expected_Schema_Reference (Optional): docs/schemas/intermediate_schema.json`
**ProactiveAnalysis (Completed by Agent during initial `PlanFile` generation for this sub-task):**
  - **IdentifiedRisks & Likelihood/Impact (L/M/H):**
    - `Risk 1: Input data schema drift (Likelihood: M, Impact: H) - Mitigation: Implement schema validation step.`
    - `Risk 2: External API rate limiting (Likelihood: L, Impact: M) - Mitigation: Implement exponential backoff for API calls.`
  - **MitigationStrategies (Planned):** (Details for above mitigations)
    - `Schema Validation: Use 'jsonschema' library against 'docs/schemas/input_spec.json'.`
  - **UnstatedDependencies (Discovered during sub-task planning):**
    - `Dependency 1: Python library 'requests' version >= 2.25.`
  - **KeyAssumptionsForThisSubTask:** (Specific to this sub-task, beyond overall plan assumptions)
    - `Assumption 1: The 'transform_data()' logic does not require external network access beyond initial setup.`
**SuggestedTestCases (If applicable, as per `@glyph/standards/testing_strategy.glyph.mdc`):**
  - `Test Case 1 (Unit): transform_data() with typical valid input - Expected: Correctly transformed output.`
  - `Test Case 2 (Unit): transform_data() with empty input - Expected: Graceful handling, empty output or specific error.`
  - `Test Case 3 (Validation): Output file 'output/transformed_data.csv' schema matches 'docs/schemas/output_schema.json'.`
**ExecutionLog (Detailed, timestamped, append-only log of Agent's actions *within this sub-task*. Each entry is a new line.  See Glyph Protocol for logging requirements.):**
  - `YYYY-MM-DDTHH:MM:SSZ | Action: Validating input file 'path/to/input.csv' schema. | Rationale: Ensure data integrity before processing (Mitigation for Risk 1). | Outcome: Schema validation successful. | Artifacts: N/A`
  - `YYYY-MM-DDTHH:MM:SSZ | Action: Executed Cursor Tool: <read_file><path>src/config/api_details.json</path></read_file>. | Rationale: Fetching API endpoint URL. | Outcome: Tool success. Data retrieved. | Artifacts: (Internal - API endpoint URL stored)`
  - `YYYY-MM-DDTHH:MM:SSZ | Action: Implemented function 'transform_data' in 'src/core/transformer.py'. | Rationale: Core logic for sub-task objective. | Outcome: Function implemented as per spec. | Artifacts: src/core/transformer.py (SHA256: [checksum])`
  - `YYYY-MM-DDTHH:MM:SSZ | Action: Encountered error during API call to X: HTTP 503 Service Unavailable. | Rationale: Attempting to fetch Y. | Outcome: API call failed. Implementing retry (Mitigation for Risk 2). | Artifacts: N/A`
  - `YYYY-MM-DDTHH:MM:SSZ | Action: Retry 1 for API call to X successful. | Rationale: Continuing after transient error. | Outcome: Data retrieved. | Artifacts: N/A`
  #  - `YYYY-MM-DDTHH:MM:SSZ | Action: User confirmed override of something | Rationale: the user confirmed  | Outcome: Proceed with task | Artifacts: N/A`
**FinalOutputSummary (CRITICAL JSON Object - Populated by Agent upon sub-task completion/failure/blockage):**
```json
{
  "subTaskStatus": "Done", // "Done" | "Failed" | "Blocked"
  "message": "Data transformation complete. Output file 'output/transformed_data.csv' generated with 1052 records.",
  "output_artifact_paths": [
    ".glyph/tasks/GLYPH#TASK_ID/Sub-1/output/transformed_data.csv",
    ".glyph/tasks/GLYPH#TASK_ID/Sub-1/logs/subtask_detail_log.txt" // Example of an internal log specific to sub-task
  ],
  "key_outputs_or_values": {
    "transformed_record_count": 1052,
    "output_file_checksum_sha256": "a1b2c3d4...",
    "data_quality_metric": 0.98
  },
  "clarification_question_for_user": null, // Populated if subTaskStatus is "Blocked" due to ambiguity
  "error_details_if_failed": null, // Populated if subTaskStatus is "Failed"
  "next_step_recommendation_for_agent": "Proceed to GLYPH#TASK_ID/Sub-2 (Data Aggregation)."
}```
